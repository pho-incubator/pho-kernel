<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel;

class UniqueFieldsTest extends TestCase
{

    protected function getKernelConfig()
    {
        $configs = parent::getKernelConfig();
        $configs["default_objects"] = [
            "graph" => \PhoNetworksAutogenerated\Graph::class,
            "founder" => \PhoNetworksAutogenerated\UserWithUniqueFeatures::class,
        ];
        return $configs;
    }

    protected function startKernel($founder=null): void
    {
      $this->configs = $this->getKernelConfig();
      $this->kernel = new Kernel($this->configs);
      $founder = new \PhoNetworksAutogenerated\UserWithUniqueFeatures($this->kernel, $this->kernel->space(), "esokullu", "123456");
      $this->kernel->boot($founder);
      
    }


    public function testSucceed() {
       $this->flushDBandRestart();
        $u = new \PhoNetworksAutogenerated\UserWithUniqueFeatures($this->kernel, $this->kernel->graph(), "another_username", "123456");
        $this->created[] = $u->id();
        $this->kernel->founder()->setBirthday("12/21/1983");
        $u->setBirthday("12/21/1983");
        $this->assertEquals($this->kernel->founder()->getBirthday(), $u->getBirthday());
        //eval(\Psy\sh());
        $this->assertTrue(true); // if it has come to this point with no exception, we're good
    }

    public function testFailDueToDuplicate() {
        $this->flushDBandRestart();
        $this->expectException(\InvalidArgumentException::class);
         $u = new \PhoNetworksAutogenerated\UserWithUniqueFeatures($this->kernel, $this->kernel->graph(), "esokullu", "123456");
         $this->created[] = $u->id();
     }

     public function testAnotherFieldWithSameValueSucceed() {
        $this->flushDBandRestart();
         $u = new \PhoNetworksAutogenerated\UserWithUniqueFeatures($this->kernel, $this->kernel->graph(), "another_username", "123456");
         $this->created[] = $u->id();
         $u->setAbout("esokullu");
         $this->assertEquals($this->kernel->founder()->getUsername(), $u->getAbout());
         //eval(\Psy\sh());
         $this->assertTrue(true); // if it has come to this point with no exception, we're good
     }


     /*
      // @todo
     public function testUniquenesswithDistinctLabel() {
         // ?
     }
     */


}