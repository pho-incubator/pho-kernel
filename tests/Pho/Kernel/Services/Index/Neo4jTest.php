<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel\Services\Index;

use Pho\Kernel\TestCase;

class Neo4jTest extends TestCase 
{

    private $client;

    protected function _countNumberOfNodes(): int
    {
        $res = $this->kernel->index()->query("MATCH(n) RETURN n");
        return count($res->results());
    }

    protected function _countNumberOfEdges(): int
    {
        $res = $this->kernel->index()->query("MATCH ()-[r]->() RETURN r");
        return count($res->results());
    }

    public function testKernelService() {
        $this->assertInstanceOf(\Pho\Kernel\Services\Index\Adapters\Neo4j::class, $this->kernel->index());
    }

    public function testBasic() {
        $this->flushDBandRestart();
        //eval(\Psy\sh());
        $u = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $about = "for testing purposes only";
        $u->setAbout($about);
        $res = $this->kernel->index()->query("MATCH(n {About: {about}}) RETURN n", ["about" => $about]);
        //$this->assertEquals($res->firstRecord()->values()[0]->value("Birthday"), $u->getBirthday());
        $this->assertEquals($res->results()[0]["n.Birthday"], $u->getBirthday());
        $this->created[] = $u->id();
    }  

    public function testWithEdge() {
        $this->flushDBandRestart();
        $u = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $content = "my first post";
        $post = $u->post($content);        
        $res = $this->kernel->index()->query("MATCH(n {Status: {content}}) RETURN n", ["content" => $content]);
        $this->assertEquals($res->results()[0]["n.CreateTime"], $post->getCreateTime());
        $res = $this->kernel->index()->query("MATCH(t {udid: {tail}})-[e]->(h {udid: {head}}) RETURN e", ["tail" => (string) $u->id(), "head" => (string) $post->id()]);
        $this->assertEquals($res->results()[0]["e.udid"], (string) $post->edges()->in()->current()->id());
        $this->created[] = $u->id();
        $this->created[] = $post->id();
        $this->created[] = $post->edges()->in()->current()->id();
    }  

    public function testFromScratch() {
        $this->flushDBandRestart();
        $initial_number_of_nodes = 3; // virtualgraph, graph, founder
        $initial_number_of_edges = 0;
        $this->assertEquals($initial_number_of_nodes, $this->_countNumberOfNodes()); 
        $this->assertEquals($initial_number_of_edges, $this->_countNumberOfEdges());
        $user1 = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user2 = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user3 = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $this->assertEquals(($initial_number_of_nodes + 3), $this->_countNumberOfNodes()); // including the Graph itself // where is the founder?
        $user1->follow($user2);
        $user2->follow($user1);
        $user2->follow($user3);
        $this->assertEquals(($initial_number_of_edges + 3), $this->_countNumberOfEdges());
        $this->kernel->founder()->follow($user1);
        $this->assertEquals(($initial_number_of_edges + 4), $this->_countNumberOfEdges());
        $content = "my first post";
        $post = $user1->post($content);
        $this->assertEquals(($initial_number_of_nodes + 4), $this->_countNumberOfNodes()); 
        $this->assertEquals(($initial_number_of_edges + 5), $this->_countNumberOfEdges());
        $this->kernel->founder()->like($post);
        $user3->like($post);
        $this->assertEquals(($initial_number_of_nodes + 4), $this->_countNumberOfNodes()); 
        $this->assertEquals(($initial_number_of_edges + 7), $this->_countNumberOfEdges());
        //eval(\Psy\sh());
        
        
    }
}