<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */


namespace Pho\Kernel;

class GraphMemberChangePersistenceTest extends TestCase
{
    public function testParticleAdded() {
        $this->flushDBandRestart();
        $count_initial = count($this->kernel->graph()->members());
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $count_final = count($this->kernel->graph()->members());
        $this->assertEquals(1, $count_final-$count_initial);
        $status = $user->post("status");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Status::class, $status);
        $count_final = count($this->kernel->graph()->members());
        $this->assertEquals(2, $count_final-$count_initial);
    }

    public function testParticleAddedWithFounder() {
        $this->flushDBandRestart();
        $count_initial = count($this->kernel->graph()->members());
        $status = $this->kernel->founder()->post("status");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Status::class, $status);
        $count_final = count($this->kernel->graph()->members());
        $this->assertEquals(1, $count_final-$count_initial);
    }

    public function testParticleAddedWithFounderPostSerialization() {
        $this->flushDBandRestart();
        $count_initial = count($this->kernel->graph()->members());
        $count_initial_through_globals = count($GLOBALS["kernel"]->graph()->members());
        $this->assertEquals($count_initial, $count_initial_through_globals);
        $founder = $this->kernel->gs()->node((string) $this->kernel->founder()->id());
        //eval(\Psy\sh());
        $status = $founder->post("status");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Status::class, $status);
        $count_final = count($this->kernel->graph()->members());
        $count_final_through_globals = count($GLOBALS["kernel"]->graph()->members());
        
        $this->assertEquals(1, $count_final-$count_initial);
        $this->assertEquals(1, $count_final_through_globals-$count_initial_through_globals);
    }

    public function testActorDelete() {
        $this->flushDBandRestart();
        $founder = $this->kernel->gs()->node((string) $this->kernel->founder()->id());
        $user = new \PhoNetworksAutogenerated\UserEditable($this->kernel, $this->kernel->graph(), rand(10000,99999), strtotime("10/10/1983"), "someone");
        $user_vg = (string) $user->editors()->id();
        $this->assertNotNull($this->kernel->database()->get($user_vg));
        $user->destroy();
        $this->assertNull($this->kernel->database()->get($user_vg));
    }

}