<?php

/*
 * This file is part of the Phá»Ÿ package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel;

use PhoNetworksAutogenerated\User;
use Pho\Framework\AbstractNotification;
use Pho\Framework\NotificationList;

class NotificationsTest extends TestCase
{
    public function testFollowNotification() {
        $this->flushDBandRestart();
        $founder = $this->kernel->founder();
        $this->assertInstanceOf(User::class, $founder);
        $this->assertInstanceOf(NotificationList::class, $founder->notifications());
        $this->assertSame(0, $founder->notifications()->count());
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user->follow($founder);
        $this->assertSame(0, $user->notifications()->count());
        $this->assertCount(1, $founder->notifications()->toArray());
        $this->assertSame(1, $founder->notifications()->count());
    }

    public function testFollowNotificationAfterSerialize() {
        $this->flushDBandRestart();
        $founder = $this->kernel->founder();
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $founder->follow($user);
        $this->assertSame(1, $user->notifications()->count());
        $user_deserialized = $this->kernel->gs()->node((string) $user->id());
        $this->assertSame(1, $user_deserialized->notifications()->count());
    }

}