<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel;

use Pho\Kernel\Standards\Space;

class BootTest extends TestCase 
{

    public function setUp() {
      $this->kernel = new Kernel($this->getKernelConfig());
      $this->setupRedis();
    }

    public function testSimple() {
        $this->assertInstanceOf(Kernel::class, $this->kernel);        
    }

    /**
     * @expectedException \Pho\Kernel\Exceptions\FounderMustBeSetException
     *
     * @return void
     */
    public function testFirstBootWithNoFounder() {
      $this->redis->flushdb();
      $this->kernel->boot();
    }

    public function testBoot() {
      $this->redis->flushdb();
      $this->assertFalse($this->kernel->live());
      $founder = new \PhoNetworksAutogenerated\User($this->kernel, new Space($this->kernel), "123456");
      $this->kernel->boot($founder);
      $redis_configs = $this->redis->keys("configs:*");
      $this->assertContains("configs:graph_id", $redis_configs);
      $graph_recreated = $this->kernel->gs()->node($this->redis->get("configs:graph_id"));
      $founder_recreated = $this->kernel->founder();
      $this->assertInstanceOf(Foundation\AbstractActor::class, $founder_recreated);
      $this->assertInstanceOf(Standards\Graph::class, $graph_recreated);
      $this->assertTrue($this->kernel->live());
    }

    public function testReboot() {
      $this->redis->flushdb();
      $founder = new \PhoNetworksAutogenerated\User($this->kernel, new Space($this->kernel), "123456");
      $this->kernel->boot($founder);
      $founder_id = $this->kernel->founder()->id()->toString();
      $graph_id = $this->kernel->graph()->id()->toString();
      $founder_context = $this->kernel->founder()->context()->id()->toString();
      $node = new \PhoNetworksAutogenerated\User($this->kernel, $this->kernel->graph(), "123456");
      $node_id = $node->id()->toString();
      $this->assertCount(2, $this->kernel->graph()->members());
      //eval(\Psy\sh());
      //eval(\Psy\sh());
      $this->kernel->halt();
      unset($this->kernel);
      $this->setUp();
      
      $this->kernel->boot();
      $this->assertEquals($graph_id, $this->kernel->graph()->id()->toString());
      $this->assertEquals($founder_id, $this->kernel->founder()->id()->toString());
      //eval(\Psy\sh());
      $this->assertEquals($founder_context, $this->kernel->founder()->context()->id()->toString());
      //eval(\Psy\sh());
      $this->assertCount(2, $this->kernel->graph()->members());
    }
}