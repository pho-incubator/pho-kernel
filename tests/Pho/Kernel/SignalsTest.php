<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel;

class SignalsTest extends TestCase
{
    public function testParticleAdded() {
        $this->flushDBandRestart();
        $ref = 0;
        $this->kernel->space()->on("particle.added", function($node) use (&$ref) {
            $ref++;
        });
        new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $this->assertEquals(1, $ref);
        new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $this->assertEquals(2, $ref);
    }

    public function testGraphModifiedWithNodeAddition() {
        $ref = 0;
        $this->kernel->graph()->on("modified", function() use (&$ref) {
            $ref++;
        });
        new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $this->assertEquals(1, $ref);
        new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $this->assertEquals(2, $ref);
    }

    public function testNodeModifiedWithAttributeChange() {
        $ref = 0;
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user->on("modified", function() use (&$ref) {
            $ref++;
        });
        $user->setBirthday(strtotime("01/15/1983"));
        $this->assertEquals(1, $ref);
    }

    public function testNodeModifiedWithEdgeChange() {
        $ref = 0;
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user->on("modified", function() use (&$ref) {
            $ref++;
        });
        $user->post("emre sokullu");
        $this->assertEquals(1, $ref);
    }

    public function testJoin() {
        $ref = 0;
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user2 = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user2->on("joined", function() use (&$ref) {
            $ref++;
        });
        //eval(\Psy\sh());
        $group = new \PhoNetworksAutogenerated\Group($this->kernel, $user, $this->graph, "Title", "Desc");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Group::class, $group);
        $user2->join($group);
        $this->assertEquals(1, $ref);
    }

    public function testLeft() {
        $ref = 0;
        $user = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user2 = new \PhoNetworksAutogenerated\User($this->kernel, $this->graph, "123456");
        $user2->on("left", function() use (&$ref) {
            $ref++;
        });
        //eval(\Psy\sh());
        $group = new \PhoNetworksAutogenerated\Group($this->kernel, $user, $this->graph, "Title", "Desc");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Group::class, $group);
        $user2->join($group);
        $this->assertEquals(0, $ref);
        $user2->leave($group);
        $this->assertEquals(1, $ref);
    }
    
}