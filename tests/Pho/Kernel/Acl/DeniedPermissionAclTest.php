<?php

/*
 * This file is part of the Pho package.
 *
 * (c) Emre Sokullu <emre@phonetworks.org>
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Pho\Kernel\Acl;

use Pho\Kernel\Foundation\Exceptions;
use Pho\Kernel\Standards\Alien;

class DeniedPermissionAclTest extends AclTestCase 
{

    public function testExecutePermissionExceptionPositive() {
        //eval(\Psy\sh());
        $post = $this->user->post("my first post");
        //$post->acl()->chmod(0x07000); // others can't read
        //$this->expectException(Exceptions\ExecutePermissionException::class);
        $this->stranger->like($post); // subscribe
        $this->assertTrue($post->hasLiker($this->stranger->id()));
    }

    public function testExecutePermissionExceptionNegative() {
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x07000); // others can't read
        $this->expectException(Exceptions\ExecutePermissionException::class);
        $this->stranger->like($post); // subscribe
    }

    public function testWritePermissionExceptionNegative() {
        $this->graph->acl()->chmod(0x04444); // read-only
        $this->expectException(Exceptions\WritePermissionException::class);
        $post = $this->user->post("my first post");
    }

    public function testReadPermissionExceptionPositive() {
        $post = $this->user->post("my first post");
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Status::class, $this->stranger->consume($post));
    }

    public function testReadPermissionExceptionNegative() {
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x04000);
        $this->assertInstanceOf(\PhoNetworksAutogenerated\Status::class, $this->user->consume($post));
        $this->expectException(Exceptions\ReadPermissionException::class);
        $this->stranger->consume($post);
    }

    public function testWriteByPermissionExceptionNegative() {
        $post = $this->user->post("my first post");
        $this->user->edit($post)->setStatus("something else");
        $this->assertEquals("something else", $this->user->consume($post)->getStatus());
        $this->expectException(Exceptions\WriteByPermissionException::class);
        $this->stranger->edit($post)->setStatus("X");
    }

    public function testWriteByStrangerPermissionExceptionPositive() {
        $content = "some content";
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x07575);
        $this->stranger->edit($post)->setStatus($content);
        $this->assertEquals($content, $this->stranger->consume($post)->getStatus());
    }

    public function testWriteByAnonymousPermissionExceptionNegative() {
        $content = "some content";
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x07575);
        $this->expectException(Exceptions\WriteByPermissionException::class);
        $this->anonymous->edit($post)->setStatus($content);
    }

    public function testWriteByAlienPermissionExceptionNegative() {
        $content = "some content";
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x07575);
        $alien = $this->kernel->alien();
        $this->assertInstanceOf(Alien::class, $alien);
        $this->expectException(Exceptions\WriteByPermissionException::class);
        $this->kernel->alien()->edit($post)->setStatus($content);
    }

    /*
    public function testWriteAlienPermissionExceptionNegative() {
        $content = "some content";
        //$this->kernel->alien()->post("my first post"); // no such function
        $this->anonymous->acl()->chmod(0x04000); // anonymized // can still post, because it's in the same graph
        $this->anonymous->post("my first post");
    }
    */

    public function testWriteBySubscriberPermissionExceptionPositive() {
        $content = "some content";
        $post = $this->user->post("my first post");
        $post->acl()->chmod(0x07755);
        $this->subscriber->edit($post)->setStatus($content);
        $this->assertEquals($content, $this->subscriber->consume($post)->getStatus());
    }

    public function testWriteBySubscriberPermissionExceptionNegative() {
        $post = $this->user->post("my first post");
        $this->expectException(Exceptions\WriteByPermissionException::class);
        $this->subscriber->edit($post)->setStatus("xyz");
    }

}